load: 'server.slate'.

lobby ensureNamespace: #Web.


Web define: #Server &parents: {Http Server} &slots: {#controller}.
Web define: #Controller &parents: {Cloneable}.


_@(Web Controller traits) didNotUnderstand: message at: position
[ ['Unknown request.'] ].

s@(Web Server traits) handle: r@(Http Request traits)
[ | pathAndQuery segments queries method targets |

  pathAndQuery: (r uri splitWith: $?).
  segments: ((pathAndQuery at: 0) splitWith: $/).
  queries: {}.

  inform: 'Segments: ' ; segments printString.

  (pathAndQuery length > 1)
    ifTrue: [
      queries: ((pathAndQuery at: 1) splitWith: $&).
      queries: (queries gather: [ | :acc :query split option |
        split: (query splitWith: $=).

        option: ('&' ; (split at: 0) ; ':') intern.
        acc ; ((split length = 1)
                 ifTrue: [{option. True}]
                 ifFalse: [{option. split at: 1}])
      ] &initial: {}).
    ].

  inform: 'Queries: ' ; queries printString.

  targets: {s controller}.
  segments length caseOf: {
    0 -> [ method: 'index'. ].
    1 -> [ method: segments first. ]
  } otherwise: [ | segmentReader |
    method: ''.

    segmentReader: segments reader.

    [segmentReader isAtEnd]
      whileFalse: [
        method: method ; (segmentReader next) ; ':'.

        (segmentReader isAtEnd)
          ifTrue: [ targets: targets ; {True}. ]
          ifFalse: [ targets: targets ; {segmentReader next}. ].
      ].
  ].

  inform: 'Method: ' ; method intern printString.
  inform: 'Targets: ' ; targets printString.

  r respondWith: (Http Response new `>> [ protocol: 'HTTP/1.1'.
                                          status: Http StatusResponse OK.
                                          headers: Dictionary new.
                                          body: ((method intern) sendTo: targets &optionals: queries). ]).
].

s@(Web Server traits) run: c@(Web Controller traits) &port: port
[ s controller: c.
  s start &port: port
].
