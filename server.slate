lobby ensureNamespace: #Http.

Http define: #Server &parents: {Cloneable}.
Http define: #Request &parents: {Cloneable} &slots: {#protocol. #method. #uri. #headers. #stream}.
Http define: #Response &parents: {Cloneable} &slots: {#protocol. #status. #headers. #body}.
Http define: #RequestParser &parents: {Parsing BasicParser}.

p@(Http RequestParser traits) readRequest
[ | chunks |
  chunks: (p source next splitWith: $ ).

  Http Request new `>> [
    protocol: (chunks at: 2).
    method: (chunks at: 0).
    uri: (chunks at: 1).
    headers: p readHeaders.
  ]
].

p@(Http RequestParser traits) readHeaders
[ | headers line lineReader |
  headers: Dictionary new.

  lineReader: p source reader.
  [line: lineReader next. line isEmpty]
    whileFalse: [ | reader name |
                  reader: line reader.
                  name: (reader upTo: $:).
                  reader next.
                  headers at: name put: reader upToEnd ].

  headers
].


rq@(Http Request traits) respondWith: rs@(Http Response traits)
[ | reply |
  reply: '' writer.
  reply ; (rs protocol) ; ' ' ; (rs status as: String) ; '\r\n'.

  rs headers do: [ | :header | reply ; header key ; ': ' ; header value ; '\r\n'. ].

  reply ; 'Content-Length: ' ; (rs body length as: String) ; '\r\n'.
  reply ; '\r\n'.
  reply ; rs body.

  rq stream nextPutAll: (reply contents as: ByteArray).
].


"An example handler. Override me."
_@(Http Server traits) handle: r@(Http Request traits)
[ r respondWith: (Http Response new `>> [ protocol: 'HTTP/1.1'.
                                          status: Http StatusResponse OK.
                                          headers: Dictionary new.
                                          body: '<h1>OK!</h1>'. ]).
].


server@(Http Server traits) start &port: port
[ port `defaultsTo: 8080.

  (Net SocketServer newOn: {127. 0. 0. 1} port: port dispatch: [
    | :parent :peer stream request |

    stream: (Net SocketStream newOn: peer).
    r@(stream reader) next [resend as: $c]. "hack fixme"

    request: (Http RequestParser newOn: stream reader lines) readRequest.
    request stream: stream.

    server handle: request.

    stream flush.
  ]) start
].
